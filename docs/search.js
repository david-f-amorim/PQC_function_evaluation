window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "pqcprep", "modulename": "pqcprep", "kind": "module", "doc": "<h3 id=\"pqcprep-provides-parametrised-quantum-circuits-pqcs-for-quantum-state-preparation\"><em>pqcprep</em> provides parametrised quantum circuits (PQCs) for quantum state preparation.</h3>\n\n<p>The aim of <em>pqcprep</em> is to implement the algorithm for quantum state preparation described in <a href=\"#background\">Background</a> via gate-efficient parametrised quantum circuits (PQCs), as described in <a href=\"#approach\">Approach</a>. \nHowever, the functionality provided as part of the package is general enough to be adapted to a wide range of other applications. </p>\n\n<h1 id=\"usage\">Usage</h1>\n\n<p><em>pqcprep</em> provides an out-of-the-box command-line tool...</p>\n\n<h1 id=\"approach\">Approach</h1>\n\n<p>The key challenge tackled by <em>pqcprep</em> is to construct a PQC that can perform function evaluation: $\\ket{j}\\ket{0} \\mapsto \\ket{j} \\ket{\\Psi'(j)}$, for some analytical function \n$\\Psi$, with $\\Psi ' \\equiv \\Psi / 2 \\pi$. Throughout this documentation, the $n$-qubit register containing the $\\ket{j}$ and the $m$-qubit register containing the $\\ket{\\Psi'(j)}$ \nwill be referred to as the \"input register\" and \"target register\", respectively.</p>\n\n<p>A quantum convolutional neural network (QCNN) is used to approach the problem. A QCNN is a parametrised quantum circuit involving multiple layers. Two types of network layers \nare implemented here:</p>\n\n<ul>\n<li><p>convolutional layers (CL) involve multi-qubit entanglement gates; </p></li>\n<li><p>input layers (IL) (replacing the conventional QCNN pooling layers) involve controlled single-qubit operations on target qubits. </p></li>\n</ul>\n\n<p>Input qubits only appear as controls throughout the QCNN. </p>\n\n<h3 id=\"convolutional-layers\">Convolutional Layers</h3>\n\n<p>Each CL involves the cascaded application of a two-qubit operator on the target register. A general two-qubit operator involves 15 parameters. Hence, to reduce the parameter space, \nthe canonical three-parameter operator</p>\n\n<p>$$\n\\mathcal{N}(\\alpha, \\beta, \\gamma) =  \\exp \\left( i \\left[ \\alpha X \\otimes X + \\beta Y \\otimes Y + \\gamma Z \\otimes Z \\right] \\right)\n$$</p>\n\n<p>is applied, at the cost of restricting the search space. This can be decomposed (see <a href=\"https://arxiv.org/pdf/quant-ph/0308006\">Vatan 2004</a>) into 3 CX, 3 $\\text{R}_\\text{z}$, and 2 $\\text{R}_\\text{y}$ gates.\nA two-parameter real version, $\\mathcal{N}_\\mathbb{R}(\\lambda, \\mu)$, can be obtained by removing the $\\text{R}_\\text{z}$. </p>\n\n<p>Two convolutional layer topologies are implemented, loosely based on <a href=\"https://arxiv.org/pdf/1905.10876\">Sim 2019</a>: </p>\n\n<ul>\n<li><p>neighbour-to-neighbour/linear CLs: the $\\mathcal{N}$ (or $\\mathcal{N}_\\mathbb{R}$) gate is applied to neighbouring target qubits; </p></li>\n<li><p>all-to-all/quadratic CLs: the $\\mathcal{N}$ (or $\\mathcal{N}_\\mathbb{R}$) gate is applied to all combinations of target qubits. </p></li>\n</ul>\n\n<p>The $\\mathcal{N}$-gate cost of neighbour-to-neighbour (NN) layers is $\\mathcal{O}(m)$ while that of all-to-all (AA) layers is $\\mathcal{O}(m^2)$.\nThe QCNN uses alternating linear and quadratic CLs.</p>\n\n<h3 id=\"input-layers\">Input Layers</h3>\n\n<p>ILs, replacing pooling layers, feed information about the input register into the target register.<br />\nAn IL involves a sequence of controlled generic single-qubit rotations (CU3 gates) on the target qubits, with input qubits as controls.\nFor an IL producing states with real amplitudes, the CU3 gates are replaced with $\\text{CR}_\\text{y}$ gates.\nEach input qubit controls precisely one CU3 (or $\\text{CR}_\\text{y}$ operation), resulting in an $\\mathcal{O}(n)$ gate cost.\nILs are inserted after every second convolutional layer, alternating between control states 0 and 1. </p>\n\n<h3 id=\"training-the-qcnn\">Training the QCNN</h3>\n\n<p>For training, the QCNN is wrapped as a <a href=\"https://qiskit-community.github.io/qiskit-machine-learning/stubs/qiskit_machine_learning.neural_networks.SamplerQNN.html\">SamplerQNN</a> \nobject and connected to PyTorch's <a href=\"https://pytorch.org/docs/stable/generated/torch.optim.Adam.html\">Adam optimiser</a> via <a href=\"https://qiskit-community.github.io/qiskit-machine-learning/stubs/qiskit_machine_learning.connectors.TorchConnector.html\">TorchConnector</a>. \nThe optimiser determines improved parameter values for each training run (\"epoch\") based on the calculated loss between output and target state. \nBeyond loss, mismatch is an important metric:\n$$\nM= 1 - |\\braket{\\psi_\\text{target}| \\psi_\\text{out}}|. \n$$</p>\n\n<p>There are two ways to train the QCNN on input data:</p>\n\n<ol>\n<li>Training on individual states: one of the $2^n$ input states, $\\ket{j},$ is randomly chosen each epoch. \nThe network is thus taught to transform $\\ket{j}\\ket{0} \\mapsto \\ket{j}\\ket{\\Psi'(j)} $ for each of the states individually.</li>\n<li>Training in superposition: the network is taught to transform \n$$\n\\left(\\sum^{2^n-1}_{j=0} c_j \\ket{j} \\right) \\ket{0} \\mapsto  \\sum^{2^n -1}_{j=0} c_j \\ket{j}\\ket{\\Psi'(j)},\n$$\nwhere the coefficients $c_j \\sim \\frac{1}{\\sqrt{2^n}}$ are randomly sampled each epoch.<br />\nBy linearity, this teaches the network to transform $\\ket{j}\\ket{0} \\mapsto \\ket{j}\\ket{\\Psi'(j)} $ for each $\\ket{j}$. </li>\n</ol>\n\n<p>One can also train the QCNN to produce a target distribution independent of the input register. This is equivalent to constructing an operator $\\hat{U}_A$\nsuch that \n$$\\hat{U}_A \\ket{0}^{\\otimes n} =  \\frac{1}{|\\tilde{A}|} \\sum^{2^n-1}_{j=0} \\tilde{A}(j) \\ket{j}$$ \nfor some distribution function $\\tilde{A}$.</p>\n\n<h1 id=\"background\">Background</h1>\n\n<p><em>pqcprep</em> builds on a scheme for quantum state preparation presented in <a href=\"https://arxiv.org/pdf/2306.11073\">Hayes 2023</a>:\na complex vector $\\boldsymbol{h} =\\lbrace \\tilde{A}_j e^{i \\Psi (j)} | 0 \\leq j &lt; N \\rbrace$, where $\\tilde{A}$, $\\Psi$ are real functions \nthat can be computed efficiently, is prepared as the quantum state \n$$ \\ket{h} = \\frac{1}{\\vert \\tilde{A} \\vert} \\sum^{2^n-1}_{j=0} \\tilde{A}(j) e^{i \\Psi (j)} \\ket{j}, $$\nusing $n =\\lceil \\log_2 N \\rceil$ qubits. </p>\n\n<p>This requires operators $\\hat{U}_A$ and $\\hat{U}_\\Psi$ such that \n\\begin{align}\n\\hat{U}_A \\ket{0}^{\\otimes n} &amp;=  \\frac{1}{|\\tilde{A}|} \\sum^{2^n-1}_{j=0} \\tilde{A}(j) \\ket{j}, \\newline\n\\hat{U}_\\Psi \\ket{j} &amp;= e^{i \\Psi (j)} \\ket{j}.\n\\end{align}</p>\n\n<p>$\\hat{U}_\\Psi$ is constructed via an operator $\\hat{Q}_\\Psi$ that performs function evaluation in an ancilla register,\n\\begin{equation}\n\\hat{Q}_\\Psi  \\ket{j} \\ket{0}^{\\otimes m}_a = \\ket{j} \\ket{\\Psi'(j)}_a,\n\\end{equation}\nwith $\\Psi'(j) \\equiv \\Psi(j) / 2 \\pi$, as well as an operator $\\hat{R}$ that extracts the phase, \n$$ \\hat{R} \\ket{j} \\ket{\\Psi'(j)}_a = \\ket{j} e^{i 2 \\pi \\Psi' (j)} \\ket{\\Psi' (j)}_a.$$\nThus, $\\hat{U}_\\Psi = \\hat{Q}_{\\Psi}^\\dagger \\hat{R} \\hat{Q}_\\Psi$ with $\\hat{Q}_{\\Psi}^\\dagger$ clearing the ancilla register: \n\\begin{align} \n\\hat{U}_\\Psi  \\hat{U}_A \\ket{0} \\ket{0}_a &amp;= \\frac{1}{|\\tilde{A}|} \\sum^{2^n-1}_{j=0} \\tilde{A}(j) \\hat{U}_\\Psi \\ket{j} \\ket{0}_a  \\newline \n&amp;= \\frac{1}{|\\tilde{A}|} \\sum^{2^n-1}_{j=0} \\tilde{A}(j)  \\hat{Q}_\\Psi^\\dagger \\hat{R} \\hat{Q}_\\Psi \\ket{j} \\ket{0}_a  \\newline \n&amp;= \\frac{1}{|\\tilde{A}|} \\sum^{2^n-1}_{j=0} \\tilde{A}(j)  \\hat{Q}_\\Psi^\\dagger \\hat{R}  \\ket{j} \\ket{\\Psi'(j)}_a  \\newline \n&amp;= \\frac{1}{|\\tilde{A}|} \\sum^{2^n-1}_{j=0} \\tilde{A}(j)  \\hat{Q}_\\Psi^\\dagger \\ket{j} e^{i \\Psi(j)} \\ket{\\Psi'(j)}_a  \\newline \n&amp;= \\frac{1}{|\\tilde{A}|} \\sum^{2^n-1}_{j=0} \\tilde{A}(j) e^{i \\Psi(j)} \\ket{j}  \\ket{0}_a  \\newline \n&amp;= \\ket{h} \\ket{0}_a  \\newline \n\\end{align}</p>\n\n<p>This size, $m$, of the ancilla register limits the precision to which $\\Psi(j)$ can be encoded to $\\sim 2^{1-m} \\pi$. </p>\n\n<h1 id=\"imprint\">Imprint</h1>\n\n<p>David Amorim, 2024. Email: <a href=\"mailto:2538354a@student.gla.ac.uk\"><em>2538354a@student.gla.ac.uk</em></a> .</p>\n\n<p>This project was funded by a Carnegie Vacation Scholarship and supervised by Prof Sarah Croke (University of Glasgow, School of Physics and Astronomy).</p>\n"}, {"fullname": "pqcprep.binary_tools", "modulename": "pqcprep.binary_tools", "kind": "module", "doc": "<p>Collection of functions relating to binary encoding and decoding.</p>\n"}, {"fullname": "pqcprep.binary_tools.dec_to_bin", "modulename": "pqcprep.binary_tools", "qualname": "dec_to_bin", "kind": "function", "doc": "<p>Encode a base-10 float to a binary string. </p>\n\n<p>The fractional part is rounded to the available precision. Little endian convention \nis used. </p>\n\n<h2 id=\"arguments\">Arguments:</h2>\n\n<ul>\n<li><p><strong>digits</strong> : <em>float</em></p>\n\n<p>The float to encode.</p></li>\n<li><p><strong>n</strong> : <em>int</em>  </p>\n\n<p>The number of bits in the binary string </p></li>\n<li><p><strong>encoding</strong> : <em>str</em></p>\n\n<p>The type of binary encoding used. Possible options are <code>'unsigned mag'</code> for unsigned magnitude \nencoding, <code>'signed mag'</code> for signed magnitude encoding, and <code>'twos comp'</code> for two's complement \nrepresentation. Default is <code>'unsigned mag'</code>.  </p></li>\n<li><p><strong>nint</strong> : <em>int</em>, <em>optional</em> </p>\n\n<p>Number of integer bits used in the encoding. If <code>nint</code> is not given all bits are taken to be\ninteger bits. </p></li>\n<li><p><strong>overflow_error</strong> : <em>bool</em></p>\n\n<p>Raises a <code>ValueError</code> if <code>digits</code> lies outside the available range for the given encoding. Default \nis True. </p></li>\n</ul>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<ul>\n<li><p><strong>bits</strong> : <em>str</em> </p>\n\n<p>The binary string representing <code>digits</code>.</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">digits</span>,</span><span class=\"param\">\t<span class=\"n\">n</span>,</span><span class=\"param\">\t<span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s1\">&#39;unsigned mag&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">nint</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">overflow_error</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pqcprep.binary_tools.bin_to_dec", "modulename": "pqcprep.binary_tools", "qualname": "bin_to_dec", "kind": "function", "doc": "<p>Decode a binary string to a float in base-10.</p>\n\n<p>Little endian convention is used. </p>\n\n<h2 id=\"arguments\">Arguments:</h2>\n\n<ul>\n<li><p><strong>bits</strong> : <em>str</em></p>\n\n<p>The binary string to decode.</p></li>\n<li><p><strong>encoding</strong> : <em>str</em></p>\n\n<p>The type of binary encoding used. Possible options are <code>'unsigned mag'</code> for unsigned magnitude \nencoding, <code>'signed mag'</code> for signed magnitude encoding, and <code>'twos comp'</code> for two's complement \nrepresentation. Default is <code>'unsigned mag'</code>.  </p></li>\n<li><p><strong>nint</strong> : <em>int</em>, <em>optional</em> </p>\n\n<p>Number of integer bits used in the encoding. If <code>nint</code> is not given all bits are taken to be\ninteger bits. </p></li>\n</ul>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<ul>\n<li><p><strong>digits</strong> : <em>float</em> </p>\n\n<p>The base-10 float represented by <code>bits</code>.</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">bits</span>, </span><span class=\"param\"><span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s1\">&#39;unsigned mag&#39;</span>, </span><span class=\"param\"><span class=\"n\">nint</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pqcprep.binary_tools.twos_complement", "modulename": "pqcprep.binary_tools", "qualname": "twos_complement", "kind": "function", "doc": "<p>Calculate the <a href=\"https://en.wikipedia.org/wiki/Two%27s_complement\">two's complement</a> of a bit string. </p>\n\n<p>Little endian convention is used. An all-zero bit string is its own complement.</p>\n\n<h2 id=\"arguments\">Arguments:</h2>\n\n<ul>\n<li><p><strong>binary</strong> : <em>str</em> </p>\n\n<p>The binary string. </p></li>\n</ul>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<ul>\n<li><p><strong>compl</strong> : <em>str</em> </p>\n\n<p>The two's complement of <code>binary</code>.</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">binary</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pqcprep.file_tools", "modulename": "pqcprep.file_tools", "kind": "module", "doc": "<p>Collection of functions regarding file handling.</p>\n"}, {"fullname": "pqcprep.file_tools.compress_args", "modulename": "pqcprep.file_tools", "qualname": "compress_args", "kind": "function", "doc": "<p>Compress a set of variable values used in network training into a dictionary . </p>\n\n<h2 id=\"arguments\">Arguments:</h2>\n\n<p>Arguments are the same as those passed to <code>.training_tools.train_QNN()</code>. See the description there.</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<ul>\n<li><p><strong>arg_dict</strong> : <em>dict</em> </p>\n\n<p>Dictionary containing variable values</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">n</span>,</span><span class=\"param\">\t<span class=\"n\">m</span>,</span><span class=\"param\">\t<span class=\"n\">L</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span>,</span><span class=\"param\">\t<span class=\"n\">epochs</span>,</span><span class=\"param\">\t<span class=\"n\">func_str</span>,</span><span class=\"param\">\t<span class=\"n\">loss_str</span>,</span><span class=\"param\">\t<span class=\"n\">meta</span>,</span><span class=\"param\">\t<span class=\"n\">nint</span>,</span><span class=\"param\">\t<span class=\"n\">mint</span>,</span><span class=\"param\">\t<span class=\"n\">phase_reduce</span>,</span><span class=\"param\">\t<span class=\"n\">train_superpos</span>,</span><span class=\"param\">\t<span class=\"n\">real</span>,</span><span class=\"param\">\t<span class=\"n\">repeat_params</span>,</span><span class=\"param\">\t<span class=\"n\">WILL_p</span>,</span><span class=\"param\">\t<span class=\"n\">WILL_q</span>,</span><span class=\"param\">\t<span class=\"n\">delta</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pqcprep.file_tools.compress_args_ampl", "modulename": "pqcprep.file_tools", "qualname": "compress_args_ampl", "kind": "function", "doc": "<p>Compress a set of variable values in training the amplitude encoding network into a dictionary . </p>\n\n<h2 id=\"arguments\">Arguments:</h2>\n\n<p>Arguments are the same as those passed to <code>.training_tools.ampl_train_QNN()</code>. See the description there. </p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<ul>\n<li><p><strong>arg_dict</strong> : <em>dict</em> </p>\n\n<p>Dictionary containing variable values</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">n</span>,</span><span class=\"param\">\t<span class=\"n\">L</span>,</span><span class=\"param\">\t<span class=\"n\">x_min</span>,</span><span class=\"param\">\t<span class=\"n\">x_max</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span>,</span><span class=\"param\">\t<span class=\"n\">epochs</span>,</span><span class=\"param\">\t<span class=\"n\">func_str</span>,</span><span class=\"param\">\t<span class=\"n\">loss_str</span>,</span><span class=\"param\">\t<span class=\"n\">meta</span>,</span><span class=\"param\">\t<span class=\"n\">nint</span>,</span><span class=\"param\">\t<span class=\"n\">repeat_params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pqcprep.file_tools.vars_to_name_str", "modulename": "pqcprep.file_tools", "qualname": "vars_to_name_str", "kind": "function", "doc": "<p>Generate a name string from a set of variable values used in network training.</p>\n\n<h2 id=\"arguments\">Arguments:</h2>\n\n<ul>\n<li><p><strong>arg_dict</strong> : <em>dict</em> </p>\n\n<p>Dictionary created from variable values using <code>compress_args()</code>. </p></li>\n</ul>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<ul>\n<li><p><strong>name_str</strong> : <em>str</em> </p>\n\n<p>Name string in the appropriate file naming convention.</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arg_dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pqcprep.file_tools.vars_to_name_str_ampl", "modulename": "pqcprep.file_tools", "qualname": "vars_to_name_str_ampl", "kind": "function", "doc": "<p>Generate a name string from a set of variable values used in training the amplitude encoding network. </p>\n\n<h2 id=\"arguments\">Arguments:</h2>\n\n<ul>\n<li><p><strong>arg_dict</strong> : <em>dict</em> </p>\n\n<p>Dictionary created from variable values using <code>compress_args()</code>. </p></li>\n</ul>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<ul>\n<li><p><strong>name_str</strong> : <em>str</em> </p>\n\n<p>Name string in the appropriate file naming convention.</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arg_dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pqcprep.file_tools.check_duplicates", "modulename": "pqcprep.file_tools", "qualname": "check_duplicates", "kind": "function", "doc": "<p>For a given set of input parameters, check if training and testing results already exist. </p>\n\n<h2 id=\"arguments\">Arguments:</h2>\n\n<ul>\n<li><p><strong>arg_dict</strong> : <em>dict</em> </p>\n\n<p>Dictionary created from variable values using <code>compress_args()</code> or <code>compress_args_ampl()</code>. </p></li>\n<li><p><strong>ampl</strong> : <em>boolean</em> </p>\n\n<p>If True, check if results exist for the amplitude-only network. Default is False     </p></li>\n</ul>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<ul>\n<li><p><strong>exist</strong> : <em>boolean</em> </p>\n\n<p>Returns True if results already exists and False otherwise.</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arg_dict</span>, </span><span class=\"param\"><span class=\"n\">ampl</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pqcprep.file_tools.check_temp", "modulename": "pqcprep.file_tools", "qualname": "check_temp", "kind": "function", "doc": "<p>For a given set of input parameters, check if temp files already exist. </p>\n\n<h2 id=\"arguments\">Arguments:</h2>\n\n<ul>\n<li><p><strong>arg_dict</strong> : <em>dict</em> </p>\n\n<p>Dictionary created from variable values using <code>compress_args()</code> or <code>compress_args_ampl()</code>. </p></li>\n<li><p><strong>ampl</strong> : <em>boolean</em> </p>\n\n<p>If True, check if results exist for the amplitude-only network. Default is False     </p></li>\n</ul>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<ul>\n<li><p><strong>exist</strong> : <em>boolean</em> </p>\n\n<p>Returns True if results already exists and False otherwise.</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arg_dict</span>, </span><span class=\"param\"><span class=\"n\">ampl</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pqcprep.file_tools.check_plots", "modulename": "pqcprep.file_tools", "qualname": "check_plots", "kind": "function", "doc": "<p>For a given set of input parameters, check if plots already exist (excluding compare plots). </p>\n\n<h2 id=\"arguments\">Arguments:</h2>\n\n<ul>\n<li><p><strong>arg_dict</strong> : <em>dict</em> </p>\n\n<p>Dictionary created from variable values using <code>compress_args()</code> or <code>compress_args_ampl()</code>. </p></li>\n<li><p><strong>log</strong> : <em>boolean</em> </p>\n\n<p>If True, check for log plots. Default is True.     </p></li>\n</ul>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<ul>\n<li><p><strong>exist</strong> : <em>boolean</em> </p>\n\n<p>Returns True if results already exists and False otherwise.</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arg_dict</span>, </span><span class=\"param\"><span class=\"n\">log</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pqcprep.phase_tools", "modulename": "pqcprep.phase_tools", "kind": "module", "doc": "<p>Collection of functions regarding phase extraction.</p>\n"}, {"fullname": "pqcprep.phase_tools.extract_phase", "modulename": "pqcprep.phase_tools", "qualname": "extract_phase", "kind": "function", "doc": "<p>Constructs an operator that extracts the phase associated with a given computational basis state:\n$ \\ket{k} \\mapsto e^{2 \\pi k} \\ket{k}$. </p>\n\n<p>This is based on a sequence of single-qubit Rz rotations, as shown in Eqs. (13)-(15) in <a href=\"https://arxiv.org/pdf/2306.11073\">Hayes 2023</a>. \nUnsigned magnitude encoding is assumed. </p>\n\n<h2 id=\"arguments\">Arguments: </h2>\n\n<ul>\n<li><p><strong>n</strong> : <em>int</em> </p>\n\n<p>Number of qubits in the system. </p></li>\n</ul>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<ul>\n<li><p><strong>circuit</strong> : <em>QuantumCircuit</em> </p>\n\n<p>Implementation of the gate as a qiskit <code>QuantumCircuit</code>.</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">n</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pqcprep.phase_tools.full_encode", "modulename": "pqcprep.phase_tools", "qualname": "full_encode", "kind": "function", "doc": "<p>Execute the quantum state preparation protocol using pre-trained QCNN weights. </p>\n\n<h2 id=\"arguments\">Arguments:</h2>\n\n<ul>\n<li><p><strong>n</strong> : <em>int</em> </p>\n\n<p>Number of qubits in the input register. </p></li>\n<li><p><strong>m</strong> : <em>int</em> </p>\n\n<p>Number of qubits in the target register. </p></li>\n<li><p><strong>weights_A_str</strong> : <em>str</em></p>\n\n<p>File path to storage location of amplitude encoding QCNN weights. </p></li>\n<li><p><strong>weights_p_str</strong> : <em>str</em></p>\n\n<p>File path to storage location of phase encoding QCNN weights.    </p></li>\n<li><p><strong>L_A</strong> : <em>int</em> </p>\n\n<p>Number of layers in the amplitude encoding QCNN.     </p></li>\n<li><p><strong>L_p</strong> : <em>int</em> </p>\n\n<p>Number of layers in the phase encoding QCNN. </p></li>\n<li><p><strong>real_p</strong> : <em>boolean</em> </p>\n\n<p>Value of the <code>real</code> argument of the phase encoding QCNN. See <code>pqcprep.pqc_tools.generate_network()</code> for details. </p></li>\n<li><p><strong>repeat_params</strong> : <em>boolean</em></p>\n\n<p>Value of the <code>repeat_params</code> argument of the phase encoding QCNN. See <code>pqcprep.pqc_tools.generate_network()</code> for details. Default is False. </p></li>\n<li><p><strong>state_vec_file</strong> : <em>str</em>, <em>optional</em> </p>\n\n<p>File path to store output state vector. </p></li>\n<li><p><strong>save</strong> : <em>boolean</em> </p>\n\n<p>If True, output statevector is saved at <code>state_vec_file</code>. Default is False.      </p></li>\n<li><p><strong>full_state_vec</strong> : <em>boolean</em> </p>\n\n<p>If True, the full statevector is additionally returned, including non-cleared ancilla states. Default is False. </p></li>\n<li><p><strong>no_UA</strong> : <em>boolean</em> </p>\n\n<p>If True, do not apply the amplitude encoding gate $\\hat{U}_A$ and instead apply a Hadamard transform on the input register. Default is False.         </p></li>\n<li><p><strong>operators</strong> : <em>str</em> </p>\n\n<p>Which operators to apply to the registers. Options are <code>'QRQ'</code> for full phase extraction, <code>'RQ'</code> for partial phase extraction, and <code>'Q'</code> for function \nevaluation only. Default is <code>'QRQ'</code>.  </p></li>\n</ul>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<ul>\n<li><p><strong>state_v</strong> : <em>array_like</em> </p>\n\n<p>Array representing the statevector of the input register, assuming a cleared target register. </p></li>\n<li><p><strong>state_v_full</strong> : <em>array_like</em>, <em>optional</em> </p>\n\n<p>Array representing the statevector of the input register for the various target register configurations.<br />\nOnly returned if <code>full_state_vec</code> is True.</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">n</span>,</span><span class=\"param\">\t<span class=\"n\">m</span>,</span><span class=\"param\">\t<span class=\"n\">weights_A_str</span>,</span><span class=\"param\">\t<span class=\"n\">weights_p_str</span>,</span><span class=\"param\">\t<span class=\"n\">L_A</span>,</span><span class=\"param\">\t<span class=\"n\">L_p</span>,</span><span class=\"param\">\t<span class=\"n\">real_p</span>,</span><span class=\"param\">\t<span class=\"n\">repeat_params</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">state_vec_file</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">save</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">full_state_vec</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">no_UA</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">operators</span><span class=\"o\">=</span><span class=\"s1\">&#39;QRQ&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pqcprep.plotting_tools", "modulename": "pqcprep.plotting_tools", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pqcprep.plotting_tools.width", "modulename": "pqcprep.plotting_tools", "qualname": "width", "kind": "variable", "doc": "<p></p>\n", "default_value": "0.75"}, {"fullname": "pqcprep.plotting_tools.color", "modulename": "pqcprep.plotting_tools", "qualname": "color", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;black&#x27;"}, {"fullname": "pqcprep.plotting_tools.fontsize", "modulename": "pqcprep.plotting_tools", "qualname": "fontsize", "kind": "variable", "doc": "<p></p>\n", "default_value": "28"}, {"fullname": "pqcprep.plotting_tools.titlesize", "modulename": "pqcprep.plotting_tools", "qualname": "titlesize", "kind": "variable", "doc": "<p></p>\n", "default_value": "32"}, {"fullname": "pqcprep.plotting_tools.ticksize", "modulename": "pqcprep.plotting_tools", "qualname": "ticksize", "kind": "variable", "doc": "<p></p>\n", "default_value": "22"}, {"fullname": "pqcprep.plotting_tools.figsize", "modulename": "pqcprep.plotting_tools", "qualname": "figsize", "kind": "variable", "doc": "<p></p>\n", "default_value": "(10, 10)"}, {"fullname": "pqcprep.plotting_tools.standard", "modulename": "pqcprep.plotting_tools", "qualname": "standard", "kind": "function", "doc": "<p>Show standard result (mismatch and loss as functions of epoch)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">n</span>,</span><span class=\"param\">\t<span class=\"n\">m</span>,</span><span class=\"param\">\t<span class=\"n\">L</span>,</span><span class=\"param\">\t<span class=\"n\">epochs</span>,</span><span class=\"param\">\t<span class=\"n\">func_str</span>,</span><span class=\"param\">\t<span class=\"n\">loss_str</span>,</span><span class=\"param\">\t<span class=\"n\">meta</span>,</span><span class=\"param\">\t<span class=\"n\">show</span>,</span><span class=\"param\">\t<span class=\"n\">log</span>,</span><span class=\"param\">\t<span class=\"n\">nint</span>,</span><span class=\"param\">\t<span class=\"n\">mint</span>,</span><span class=\"param\">\t<span class=\"n\">phase_reduce</span>,</span><span class=\"param\">\t<span class=\"n\">train_superpos</span>,</span><span class=\"param\">\t<span class=\"n\">real</span>,</span><span class=\"param\">\t<span class=\"n\">repeat_params</span>,</span><span class=\"param\">\t<span class=\"n\">WILL_p</span>,</span><span class=\"param\">\t<span class=\"n\">WILL_q</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pqcprep.plotting_tools.standard_bar", "modulename": "pqcprep.plotting_tools", "qualname": "standard_bar", "kind": "function", "doc": "<p>Show mismatch for various input states after training</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">n</span>,</span><span class=\"param\">\t<span class=\"n\">m</span>,</span><span class=\"param\">\t<span class=\"n\">L</span>,</span><span class=\"param\">\t<span class=\"n\">epochs</span>,</span><span class=\"param\">\t<span class=\"n\">func_str</span>,</span><span class=\"param\">\t<span class=\"n\">loss</span>,</span><span class=\"param\">\t<span class=\"n\">meta</span>,</span><span class=\"param\">\t<span class=\"n\">show</span>,</span><span class=\"param\">\t<span class=\"n\">log</span>,</span><span class=\"param\">\t<span class=\"n\">nint</span>,</span><span class=\"param\">\t<span class=\"n\">mint</span>,</span><span class=\"param\">\t<span class=\"n\">phase_reduce</span>,</span><span class=\"param\">\t<span class=\"n\">train_superpos</span>,</span><span class=\"param\">\t<span class=\"n\">real</span>,</span><span class=\"param\">\t<span class=\"n\">repeat_params</span>,</span><span class=\"param\">\t<span class=\"n\">WILL_p</span>,</span><span class=\"param\">\t<span class=\"n\">WILL_q</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pqcprep.plotting_tools.comp_loss_funcs", "modulename": "pqcprep.plotting_tools", "qualname": "comp_loss_funcs", "kind": "function", "doc": "<p>Compare mismatch for different loss functions</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">n</span>,</span><span class=\"param\">\t<span class=\"n\">m</span>,</span><span class=\"param\">\t<span class=\"n\">L</span>,</span><span class=\"param\">\t<span class=\"n\">epochs</span>,</span><span class=\"param\">\t<span class=\"n\">func_str</span>,</span><span class=\"param\">\t<span class=\"n\">loss_str_arr</span>,</span><span class=\"param\">\t<span class=\"n\">meta</span>,</span><span class=\"param\">\t<span class=\"n\">show</span>,</span><span class=\"param\">\t<span class=\"n\">log</span>,</span><span class=\"param\">\t<span class=\"n\">nint</span>,</span><span class=\"param\">\t<span class=\"n\">mint</span>,</span><span class=\"param\">\t<span class=\"n\">phase_reduce</span>,</span><span class=\"param\">\t<span class=\"n\">train_superpos</span>,</span><span class=\"param\">\t<span class=\"n\">real</span>,</span><span class=\"param\">\t<span class=\"n\">repeat_params</span>,</span><span class=\"param\">\t<span class=\"n\">WILL_p</span>,</span><span class=\"param\">\t<span class=\"n\">WILL_q</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pqcprep.plotting_tools.comp_L", "modulename": "pqcprep.plotting_tools", "qualname": "comp_L", "kind": "function", "doc": "<p>Compare results for QCNNs with different numbers of layers \n(expecting everything else to be identical)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">n</span>,</span><span class=\"param\">\t<span class=\"n\">m</span>,</span><span class=\"param\">\t<span class=\"n\">L_arr</span>,</span><span class=\"param\">\t<span class=\"n\">epochs</span>,</span><span class=\"param\">\t<span class=\"n\">func_str</span>,</span><span class=\"param\">\t<span class=\"n\">loss_str</span>,</span><span class=\"param\">\t<span class=\"n\">meta</span>,</span><span class=\"param\">\t<span class=\"n\">show</span>,</span><span class=\"param\">\t<span class=\"n\">log</span>,</span><span class=\"param\">\t<span class=\"n\">nint</span>,</span><span class=\"param\">\t<span class=\"n\">mint</span>,</span><span class=\"param\">\t<span class=\"n\">phase_reduce</span>,</span><span class=\"param\">\t<span class=\"n\">train_superpos</span>,</span><span class=\"param\">\t<span class=\"n\">real</span>,</span><span class=\"param\">\t<span class=\"n\">repeat_params</span>,</span><span class=\"param\">\t<span class=\"n\">WILL_p</span>,</span><span class=\"param\">\t<span class=\"n\">WILL_q</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pqcprep.plotting_tools.comp_f", "modulename": "pqcprep.plotting_tools", "qualname": "comp_f", "kind": "function", "doc": "<p>Compare results for QCNNs evaluating different functions \n(expecting everything else to be identical)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">n</span>,</span><span class=\"param\">\t<span class=\"n\">m</span>,</span><span class=\"param\">\t<span class=\"n\">L</span>,</span><span class=\"param\">\t<span class=\"n\">epochs</span>,</span><span class=\"param\">\t<span class=\"n\">func_str_arr</span>,</span><span class=\"param\">\t<span class=\"n\">loss_str</span>,</span><span class=\"param\">\t<span class=\"n\">meta</span>,</span><span class=\"param\">\t<span class=\"n\">show</span>,</span><span class=\"param\">\t<span class=\"n\">log</span>,</span><span class=\"param\">\t<span class=\"n\">nint</span>,</span><span class=\"param\">\t<span class=\"n\">mint</span>,</span><span class=\"param\">\t<span class=\"n\">phase_reduce</span>,</span><span class=\"param\">\t<span class=\"n\">train_superpos</span>,</span><span class=\"param\">\t<span class=\"n\">real</span>,</span><span class=\"param\">\t<span class=\"n\">repeat_params</span>,</span><span class=\"param\">\t<span class=\"n\">WILL_p</span>,</span><span class=\"param\">\t<span class=\"n\">WILL_q</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pqcprep.plotting_tools.comp_meta", "modulename": "pqcprep.plotting_tools", "qualname": "comp_meta", "kind": "function", "doc": "<p>Compare results for QCNNs with different meta strings. \n(expecting everything else to be identical)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">n</span>,</span><span class=\"param\">\t<span class=\"n\">m</span>,</span><span class=\"param\">\t<span class=\"n\">L</span>,</span><span class=\"param\">\t<span class=\"n\">epochs</span>,</span><span class=\"param\">\t<span class=\"n\">func_str</span>,</span><span class=\"param\">\t<span class=\"n\">loss_str</span>,</span><span class=\"param\">\t<span class=\"n\">meta_arr</span>,</span><span class=\"param\">\t<span class=\"n\">show</span>,</span><span class=\"param\">\t<span class=\"n\">log</span>,</span><span class=\"param\">\t<span class=\"n\">nint</span>,</span><span class=\"param\">\t<span class=\"n\">mint</span>,</span><span class=\"param\">\t<span class=\"n\">phase_reduce</span>,</span><span class=\"param\">\t<span class=\"n\">train_superpos</span>,</span><span class=\"param\">\t<span class=\"n\">real</span>,</span><span class=\"param\">\t<span class=\"n\">repeat_params</span>,</span><span class=\"param\">\t<span class=\"n\">WILL_p</span>,</span><span class=\"param\">\t<span class=\"n\">WILL_q</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pqcprep.plotting_tools.comp_epochs", "modulename": "pqcprep.plotting_tools", "qualname": "comp_epochs", "kind": "function", "doc": "<p>Compare results for QCNNs with different epochs. \n(expecting everything else to be identical)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">n</span>,</span><span class=\"param\">\t<span class=\"n\">m</span>,</span><span class=\"param\">\t<span class=\"n\">L</span>,</span><span class=\"param\">\t<span class=\"n\">epochs_arr</span>,</span><span class=\"param\">\t<span class=\"n\">func_str</span>,</span><span class=\"param\">\t<span class=\"n\">loss_str</span>,</span><span class=\"param\">\t<span class=\"n\">meta</span>,</span><span class=\"param\">\t<span class=\"n\">show</span>,</span><span class=\"param\">\t<span class=\"n\">log</span>,</span><span class=\"param\">\t<span class=\"n\">nint</span>,</span><span class=\"param\">\t<span class=\"n\">mint</span>,</span><span class=\"param\">\t<span class=\"n\">phase_reduce</span>,</span><span class=\"param\">\t<span class=\"n\">train_superpos</span>,</span><span class=\"param\">\t<span class=\"n\">real</span>,</span><span class=\"param\">\t<span class=\"n\">repeat_params</span>,</span><span class=\"param\">\t<span class=\"n\">WILL_p</span>,</span><span class=\"param\">\t<span class=\"n\">WILL_q</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pqcprep.plotting_tools.comp_mean_mismatch", "modulename": "pqcprep.plotting_tools", "qualname": "comp_mean_mismatch", "kind": "function", "doc": "<p>Compare average mismatch for QCNNs with different epochs and L values \n(expecting everything else to be identical)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">n</span>,</span><span class=\"param\">\t<span class=\"n\">m</span>,</span><span class=\"param\">\t<span class=\"n\">L_arr</span>,</span><span class=\"param\">\t<span class=\"n\">epochs_arr</span>,</span><span class=\"param\">\t<span class=\"n\">func_str</span>,</span><span class=\"param\">\t<span class=\"n\">loss</span>,</span><span class=\"param\">\t<span class=\"n\">meta</span>,</span><span class=\"param\">\t<span class=\"n\">show</span>,</span><span class=\"param\">\t<span class=\"n\">log</span>,</span><span class=\"param\">\t<span class=\"n\">nint</span>,</span><span class=\"param\">\t<span class=\"n\">mint</span>,</span><span class=\"param\">\t<span class=\"n\">phase_reduce</span>,</span><span class=\"param\">\t<span class=\"n\">train_superpos</span>,</span><span class=\"param\">\t<span class=\"n\">real</span>,</span><span class=\"param\">\t<span class=\"n\">repeat_params</span>,</span><span class=\"param\">\t<span class=\"n\">WILL_p</span>,</span><span class=\"param\">\t<span class=\"n\">WILL_q</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pqcprep.pqc_tools", "modulename": "pqcprep.pqc_tools", "kind": "module", "doc": "<p>Collection of functions relating to setting up a QCNN.</p>\n"}, {"fullname": "pqcprep.pqc_tools.N_gate", "modulename": "pqcprep.pqc_tools", "qualname": "N_gate", "kind": "function", "doc": "<p>Constructs the two-qubit three-parameter $\\mathcal{N}$ gate, defined as \n$$\\mathcal{N}(\\alpha, \\beta, \\gamma) = \\exp \\left( i \\left[ \\alpha X \\otimes X + \\beta Y \\otimes Y + \\gamma Z \\otimes Z \\right] \\right),$$\nwhere $X$, $Y$, $Z$ are the Pauli operators. </p>\n\n<p>This is implemented via three CX gates, three Rz gates and two Ry gates, as shown in <a href=\"https://arxiv.org/pdf/quant-ph/0308006\">Vatan 2004</a>.  </p>\n\n<h2 id=\"arguments\">Arguments:</h2>\n\n<ul>\n<li><p><strong>params</strong> : <em>array_like</em></p>\n\n<p>Array-like object containing the gate parameters, corresponding to the qubit rotation angles. </p></li>\n<li><p><strong>real</strong> : <em>boolean</em></p>\n\n<p>If True, a two-parameter version of the $\\mathcal{N}$ gate is implemented instead, with one of CX gatess and all of the \nRz gates removed. This ensures real amplitudes. Default is False.   </p></li>\n</ul>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<ul>\n<li><p><strong>circuit</strong> : <em>QuantumCircuit</em></p>\n\n<p>Implementation of the $\\mathcal{N}$ gate as a qiskit <code>QuantumCircuit</code>.</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">params</span>, </span><span class=\"param\"><span class=\"n\">real</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pqcprep.pqc_tools.input_layer", "modulename": "pqcprep.pqc_tools", "qualname": "input_layer", "kind": "function", "doc": "<p>Implement a QCNN input layer as a parametrised quantum circuit. </p>\n\n<p>The layer consists of a sequence of controlled arbitrary single-qubit operations (CU3 operations)\napplied to the target register with the input qubits acting a controls. This feeds information \nabout the input register state into the target register. </p>\n\n<h2 id=\"arguments\">Arguments:</h2>\n\n<ul>\n<li><p><strong>n</strong> : <em>int</em></p>\n\n<p>Number of qubits in the input register. </p></li>\n<li><p><strong>m</strong> : <em>int</em> </p>\n\n<p>Number of qubits in the target register. </p></li>\n<li><p><strong>par_label</strong> : <em>str</em></p>\n\n<p>Label to assign to the parameter vector. </p></li>\n<li><p><strong>ctrl_state</strong> : <em>int</em> </p>\n\n<p>Control state of the controlled gates. If equal to 0, the controlled operation is applied \nwhen the control qubit is in state $\\ket{0}$. If equal to 1, the controlled operation is \napplied when the control qubit is in state $\\ket{1}$. Default is 0. </p></li>\n<li><p><strong>real</strong> : <em>boolean</em></p>\n\n<p>If True, controlled Ry rotations are applied instead of CU3 operations. This ensures real \namplitudes. Default is False.     </p></li>\n<li><p><strong>params</strong> : <em>array_like</em>, <em>optional</em></p>\n\n<p>Directly assign values, stored in <code>params</code>, to the circuit parameters instead of creating a <code>ParameterVector</code>.      </p></li>\n<li><p><strong>AA</strong> : <em>boolean</em> </p>\n\n<p>If True, each input qubit controls an operation on each target qubit, corresponding to an \"all-to-all\" layer topology. \nDefault is False. </p></li>\n<li><p><strong>shift</strong> : <em>int</em> </p>\n\n<p>If <code>AA</code> is False, the $j$th input qubit controls an operation applied on the $(j+s)$th target qubit with wrap-around \nfor <code>n &gt; m</code>. Default is 0.    </p></li>\n<li><p><strong>wrap</strong>: <em>boolean</em> </p>\n\n<p>If True, map rotation angles to an interval specified by <code>map_angles()</code>. Default is False.     </p></li>\n</ul>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<ul>\n<li><p><strong>circuit</strong> : <em>QuantumCircuit</em> </p>\n\n<p>The qiskit <code>QuantumCircuit</code> implementation of the input layer.</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">n</span>,</span><span class=\"param\">\t<span class=\"n\">m</span>,</span><span class=\"param\">\t<span class=\"n\">par_label</span>,</span><span class=\"param\">\t<span class=\"n\">ctrl_state</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">real</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">params</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">AA</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">shift</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">wrap</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pqcprep.pqc_tools.conv_layer_NN", "modulename": "pqcprep.pqc_tools", "qualname": "conv_layer_NN", "kind": "function", "doc": "<p>Implement a QCNN neighbour-to-neighbour convolutional layer as a parametrised quantum circuit. </p>\n\n<p>The layer consists of the cascaded application of the two-qubit $\\mathcal{N}$ gate on\nthe target register. $\\mathcal{N}$ is applied to all neighbouring target qubits, including a connection between\nthe first and last qubit (\"neighbour-to-neighbour\" topology), resulting in a gate cost linear in the size of the target register. </p>\n\n<h2 id=\"arguments\">Arguments:</h2>\n\n<ul>\n<li><p><strong>m</strong> : <em>int</em> </p>\n\n<p>Number of qubits in the target register. </p></li>\n<li><p><strong>par_label</strong> : <em>str</em></p>\n\n<p>Label to assign to the parameter vector. </p></li>\n<li><p><strong>real</strong> : <em>boolean</em></p>\n\n<p>If True, the real version of the $\\mathcal{N}$ gate is used (which only involves CX and Ry operations). This ensures real \namplitudes. Default is False.     </p></li>\n<li><p><strong>params</strong> : <em>array_like</em>, <em>optional</em></p>\n\n<p>Directly assign values, stored in <code>params</code>, to the circuit parameters instead of creating a <code>ParameterVector</code>. </p></li>\n<li><p><strong>wrap</strong>: <em>boolean</em> </p>\n\n<p>If True, map rotation angles to an interval specified by <code>map_angles()</code>. Default is False.         </p></li>\n</ul>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<ul>\n<li><p><strong>circuit</strong> : <em>QuantumCircuit</em> </p>\n\n<p>The qiskit <code>QuantumCircuit</code> implementation of the input layer.</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">m</span>, </span><span class=\"param\"><span class=\"n\">par_label</span>, </span><span class=\"param\"><span class=\"n\">real</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">params</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">wrap</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pqcprep.pqc_tools.conv_layer_AA", "modulename": "pqcprep.pqc_tools", "qualname": "conv_layer_AA", "kind": "function", "doc": "<p>Implement a QCNN all-to-all convolutional layer as a parametrised quantum circuit. </p>\n\n<p>The layer consists of the cascaded application of the two-qubit $\\mathcal{N}$ gate on\nthe target register. $\\mathcal{N}$ is applied to all combinations of target qubits (\"all-to-all\" topology),\nresulting in a gate cost quadratic in the size of the target register. </p>\n\n<h2 id=\"arguments\">Arguments:</h2>\n\n<ul>\n<li><p><strong>m</strong> : <em>int</em> </p>\n\n<p>Number of qubits in the target register. </p></li>\n<li><p><strong>par_label</strong> : <em>str</em></p>\n\n<p>Label to assign to the parameter vector. </p></li>\n<li><p><strong>real</strong> : <em>boolean</em></p>\n\n<p>If True, the real version of the $\\mathcal{N}$ gate is used (which only involves CX and Ry operations). This ensures real \namplitudes. Default is False.     </p></li>\n<li><p><strong>params</strong> : <em>array_like</em>, <em>optional</em></p>\n\n<p>Directly assign values, stored in <code>params</code>, to the circuit parameters instead of creating a <code>ParameterVector</code>.   </p></li>\n<li><p><strong>wrap</strong>: <em>boolean</em> </p>\n\n<p>If True, map rotation angles to an interval specified by <code>map_angles()</code>. Default is False.        </p></li>\n</ul>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<ul>\n<li><p><strong>circuit</strong> : <em>QuantumCircuit</em> </p>\n\n<p>The qiskit <code>QuantumCircuit</code> implementation of the input layer.</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">m</span>, </span><span class=\"param\"><span class=\"n\">par_label</span>, </span><span class=\"param\"><span class=\"n\">real</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">params</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">wrap</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pqcprep.pqc_tools.digital_encoding", "modulename": "pqcprep.pqc_tools", "qualname": "digital_encoding", "kind": "function", "doc": "<p>Set up a parametrised quantum circuit for the digital encoding of a binary number onto \na quantum register. </p>\n\n<p>The encoding is set by assigning the value <code>0</code> to the $i$th parameter of the circuit to \nrepresent a state $\\ket{0}$ for the $i$th bit and assigning $\\pi$ for the case $\\ket{1}$. \nValues can be assigned to circuit parameters using qiskit's <code>QuantumCircuit.assign_parameters()</code>.  </p>\n\n<p>This is to be used in conjunction with the parameter array generated by <code>binary_to_encode_param()</code>. </p>\n\n<p>Example usage: </p>\n\n<pre><code>    &gt;&gt;&gt; binary='011001'                         # bit string to encode \n    &gt;&gt;&gt; params=binary_to_encode_param(binary)   # generate parameter array \n    &gt;&gt;&gt; qc=digital_encoding(len(binary))        # generate circuit \n    &gt;&gt;&gt; qc.assign_parameters(params)            # assign parameters to circuit\n</code></pre>\n\n<h2 id=\"arguments\">Arguments:</h2>\n\n<ul>\n<li><p><strong>n</strong> : <em>int</em> </p>\n\n<p>Number of qubits in the register. Should be equal to the number of bits \nin the bit strings that are to be encoded. </p></li>\n</ul>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<ul>\n<li><p><strong>circuit</strong> : <em>QuantumCircuit</em> </p>\n\n<p>The qiskit <code>QuantumCircuit</code> implementation of the encoding circuit, with <code>n</code> unassigned parameters.</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">n</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pqcprep.pqc_tools.binary_to_encode_param", "modulename": "pqcprep.pqc_tools", "qualname": "binary_to_encode_param", "kind": "function", "doc": "<p>Generate the parameter array for digital encoding corresponding to a binary string. </p>\n\n<p>This is to be used in conjunction with the encoding circuit generated by <code>digital_encoding()</code>. </p>\n\n<p>Example usage: </p>\n\n<pre><code>    &gt;&gt;&gt; binary='011001'                         # bit string to encode \n    &gt;&gt;&gt; params=binary_to_encode_param(binary)   # generate parameter array \n    &gt;&gt;&gt; qc=digital_encoding(len(binary))        # generate circuit \n    &gt;&gt;&gt; qc.assign_parameters(params)            # assign parameters to circuit\n</code></pre>\n\n<h2 id=\"arguments\">Arguments:</h2>\n\n<ul>\n<li><p><strong>binary</strong> : <em>str</em> </p>\n\n<p>The binary string. Little endian convention is assumed. </p></li>\n</ul>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<ul>\n<li><p><strong>params</strong> : <em>array_like</em> </p>\n\n<p>The parameter array of length <code>len(binary)</code> corresponding to <code>binary</code>. Big endian convention is used. </p></li>\n</ul>\n\n<p>Convert an n-bit binary string to the associated parameter array to feed \ninto the digital encoding circuit.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">binary</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pqcprep.pqc_tools.generate_network", "modulename": "pqcprep.pqc_tools", "qualname": "generate_network", "kind": "function", "doc": "<p>Set up a QCNN consisting of input and convolutional layers acting on two distinct registers, the 'input register' and the 'target register'. </p>\n\n<p>Input layers consist of single-qubit operations applied to the target register, controlled by the input register qubits. Convolutional layers\nconsist of two-qubit operations applied to the target register. See <code>input_layer()</code> for more information on input layers and <code>conv_layer_AA()</code>, \n<code>conv_layer_NN()</code> for more information on convolutional layers. </p>\n\n<p>The network was designed for the task of performing function evaluation, i.e. to implement an operator $\\hat{Q}_\\Psi$ such that \n$$ \\hat{Q}_\\Psi \\ket{j}_i \\ket{0}_t  = \\ket{j}_i \\ket{\\Psi(j)}_t,$$\nfor some function $\\Psi$ with the subscripts $i$ and $t$ denoting the input and target registers, respectively. \nWith some adaptation, the network structure could also be used for other applications. </p>\n\n<h2 id=\"arguments\">Arguments:</h2>\n\n<ul>\n<li><p><strong>n</strong> : <em>int</em> </p>\n\n<p>Number of qubits in the input register. </p></li>\n<li><p><strong>m</strong> : <em>int</em> </p>\n\n<p>Number of qubits in the target register. </p></li>\n<li><p><strong>L</strong> : <em>int</em> </p>\n\n<p>Number of layers in the network. Note that <code>L</code> does not take into account the optional initial input layer<br />\nadded by <code>initial_IL</code>. Further, <code>L</code> does not take into account the padding of the network with additional input \nlayers to ensure the number of input layers is at least equal to <code>m</code>. </p></li>\n<li><p><strong>encode</strong> : <em>boolean</em></p>\n\n<p>If True, apply an initial encoding circuit to the input register which can be used control the input states of the network. \nDefault is False. </p></li>\n<li><p><strong>toggle_IL</strong> : <em>boolean</em>  </p>\n\n<p>If True, every third layer added is an input layer and additional input layers are added to ensure the number of input layers is at least equal to\n<code>m</code>, with input layers alternating between control states 0 and 1. The input layer <code>shift</code> parameter is successively increased for each new input layer, \nresulting in each input qubit controlling an operation on each target qubit at some point in the network. </p>\n\n<p>If False, only convolutional layers are added. In either case, convolutional layers alternate\nbetween all-to-all and neighbour-to-neighbour layers. Default is True.    </p></li>\n<li><p><strong>initial_IL</strong> : <em>boolean</em></p>\n\n<p>If True, add an input layer at the beginning of the circuit. Default is True. </p></li>\n<li><p><strong>input_Ry</strong> : <em>boolean</em></p>\n\n<p>If True, initially apply a sequence of parametrised Ry rotations to the input register. Default is False. </p></li>\n<li><p><strong>real</strong> : <em>boolean</em></p>\n\n<p>If True, use the real versions of input and convolutional layers, which only contain CX and Ry gates and hence ensure \nreal amplitudes. Default is False. </p></li>\n<li><p><strong>inverse</strong> : <em>boolean</em> </p>\n\n<p>If True, invert the circuit and return the inverse of the network. </p></li>\n<li><p><strong>repeat_params</strong> : <em>str</em>, <em>optional</em></p>\n\n<p>Keep parameters fixed for different layer types, i.e. use the same parameter values for each instance of a layer type. \nOptions are <code>'CL'</code> (keep parameters fixed for convolutional layers), <code>'IL'</code> (keep parameters fixed for input layers), <code>'both'</code> \n(keep parameters fixed for both convolutional and input layers). </p></li>\n<li><p><strong>wrap</strong>: <em>boolean</em> </p>\n\n<p>If True, map rotation angles to an interval specified by <code>map_angles()</code>. Default is False.     </p></li>\n</ul>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<ul>\n<li><p><strong>circuit</strong> : <em>QuantumCircuit</em> </p>\n\n<p>The qiskit <code>QuantumCircuit</code> implementation of the network, with unassigned parameters.</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">n</span>,</span><span class=\"param\">\t<span class=\"n\">m</span>,</span><span class=\"param\">\t<span class=\"n\">L</span>,</span><span class=\"param\">\t<span class=\"n\">encode</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">toggle_IL</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">initial_IL</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">input_Ry</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">real</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">inverse</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">repeat_params</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">wrap</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pqcprep.pqc_tools.A_generate_network", "modulename": "pqcprep.pqc_tools", "qualname": "A_generate_network", "kind": "function", "doc": "<p>Set up a network consisting of real convolutional layers acting on a single qubit register. </p>\n\n<p>Layers alternate between all-to-all and neighbour-to-neighbour convolutional layers. For more \ninformation see <code>conv_layer_AA()</code>, <code>conv_layer_NN()</code>. The convolutional layers are <em>real</em> in \nthe sense of involving only CX and Ry operations, ensuring real amplitudes. </p>\n\n<p>The network was designed for the task of encoding a suitably normalised real function, $A(j)$, into the amplitudes of the \nregister, i.e. to implement an operator $\\hat{U}_A$ such that<br />\n$$ \\hat{U}_A \\ket{j}= A(j) \\ket{j}.$$\nWith some adaptation, the network structure could also be used for other applications. </p>\n\n<h2 id=\"arguments\">Arguments:</h2>\n\n<ul>\n<li><p><strong>n</strong> : <em>int</em> </p>\n\n<p>Number of qubits in the register. </p></li>\n<li><p><strong>L</strong> : <em>int</em> </p>\n\n<p>Number of layers in the network. </p></li>\n<li><p><strong>repeat_params</strong> : <em>boolean</em> </p>\n\n<p>If True, use the same parameter values for each layer type. Default is False. </p></li>\n<li><p><strong>wrap</strong>: <em>boolean</em> </p>\n\n<p>If True, map rotation angles to an interval specified by <code>map_angles()</code>. Default is False.      </p></li>\n</ul>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<ul>\n<li><p><strong>circuit</strong> : <em>QuantumCircuit</em> </p>\n\n<p>The qiskit <code>QuantumCircuit</code> implementation of the network, with unassigned parameters.</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">n</span>, </span><span class=\"param\"><span class=\"n\">L</span>, </span><span class=\"param\"><span class=\"n\">repeat_params</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">wrap</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pqcprep.pqc_tools.get_state_vec", "modulename": "pqcprep.pqc_tools", "qualname": "get_state_vec", "kind": "function", "doc": "<p>Get statevector produced by a quantum circuit. </p>\n\n<p>Uses the <code>qiskit.Aer</code> backend. </p>\n\n<h2 id=\"arguments\">Arguments:</h2>\n\n<ul>\n<li><p><strong>circuit</strong> : <em>QuantumCircuit</em> </p>\n\n<p>The circuit to be evaluated. </p></li>\n</ul>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<ul>\n<li><p><strong>state_vector</strong> : <em>array_like</em> </p>\n\n<p>Array storing the complex amplitudes of the system to be in each of the \n<code>2**circuit.num_qubits</code> basis states.</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">circuit</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pqcprep.pqc_tools.map_angle", "modulename": "pqcprep.pqc_tools", "qualname": "map_angle", "kind": "function", "doc": "<p>Map a rotation angle to the interval $(0, \\frac{\\pi}{2})$.</p>\n\n<p>An inverse tan function is used for the mapping. </p>\n\n<h2 id=\"arguments\">Arguments:</h2>\n\n<ul>\n<li><p><strong>theta</strong> : <em>float</em> </p>\n\n<p>Rotation angle. </p></li>\n</ul>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<ul>\n<li><p><strong>theta_mapped</strong> : <em>float</em> </p>\n\n<p>Rotation angle mapped to the given interval.</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">theta</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pqcprep.psi_tools", "modulename": "pqcprep.psi_tools", "kind": "module", "doc": "<p>Collection of functions relating to the function $\\Psi$ to be evaluated by the QCNN.</p>\n"}, {"fullname": "pqcprep.psi_tools.x_trans", "modulename": "pqcprep.psi_tools", "qualname": "x_trans", "kind": "function", "doc": "<p>Transform a scalar to match the frequency scaling used for the gravitational wave binary system inspiral\nin <a href=\"https://arxiv.org/pdf/2306.11073\">Hayes 2023</a>. </p>\n\n<h2 id=\"arguments\">Arguments:</h2>\n\n<ul>\n<li><p><strong>x</strong> : <em>float</em></p>\n\n<p>Scalar to be transformed. </p></li>\n</ul>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<ul>\n<li><p><strong>x_t</strong> : <em>float</em></p>\n\n<p>Transformed scalar.</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pqcprep.psi_tools.psi_H", "modulename": "pqcprep.psi_tools", "qualname": "psi_H", "kind": "function", "doc": "<p>The phase function $\\Psi$ for the gravitational wave binary system inspiral\nin <a href=\"https://arxiv.org/pdf/2306.11073\">Hayes 2023</a>. </p>\n\n<h2 id=\"arguments\">Arguments:</h2>\n\n<ul>\n<li><p><strong>x</strong> : <em>float</em></p>\n\n<p>$x$. </p></li>\n</ul>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<ul>\n<li><p><strong>out</strong> : <em>float</em></p>\n\n<p>$\\Psi(x)$.</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pqcprep.psi_tools.psi", "modulename": "pqcprep.psi_tools", "qualname": "psi", "kind": "function", "doc": "<p>A wrapper for different phase functions. </p>\n\n<p>Inputs are scaled via <code>x_trans()</code> in all cases. </p>\n\n<h2 id=\"arguments\">Arguments:</h2>\n\n<ul>\n<li><p><strong>x</strong> : <em>float</em> </p>\n\n<p>$x$.  </p></li>\n<li><p><strong>mode</strong> : <em>str</em></p>\n\n<p>Options are <code>'psi'</code> (corresponding to <code>psi_H()</code>), <code>'linear'</code> (corresponding to <code>psi_linear()</code>), <code>'quadratic'</code> (corresponding to <code>psi_quadratic()</code>),\n<code>'sin'</code> (corresponding to <code>psi_sine()</code>). Default is <code>'psi'</code>. </p></li>\n</ul>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<ul>\n<li><p><strong>out</strong> : <em>float</em> </p>\n\n<p>$\\Psi(x)$ for the $\\Psi$ selected via <code>mode</code>.</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;psi&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pqcprep.psi_tools.psi_linear", "modulename": "pqcprep.psi_tools", "qualname": "psi_linear", "kind": "function", "doc": "<p>A simple linear phase function $\\Psi$. </p>\n\n<h2 id=\"arguments\">Arguments:</h2>\n\n<ul>\n<li><p><strong>x</strong> : <em>float</em></p>\n\n<p>$x$. </p></li>\n</ul>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<ul>\n<li><p><strong>out</strong> : <em>float</em></p>\n\n<p>$\\Psi(x) \\sim x$.</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pqcprep.psi_tools.psi_quadratic", "modulename": "pqcprep.psi_tools", "qualname": "psi_quadratic", "kind": "function", "doc": "<p>A simple quadratic phase function $\\Psi$. </p>\n\n<h2 id=\"arguments\">Arguments:</h2>\n\n<ul>\n<li><p><strong>x</strong> : <em>float</em></p>\n\n<p>$x$. </p></li>\n</ul>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<ul>\n<li><p><strong>out</strong> : <em>float</em></p>\n\n<p>$\\Psi(x) \\sim x^2$.</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pqcprep.psi_tools.psi_sine", "modulename": "pqcprep.psi_tools", "qualname": "psi_sine", "kind": "function", "doc": "<p>A simple sinusoidal phase function $\\Psi$. </p>\n\n<h2 id=\"arguments\">Arguments:</h2>\n\n<ul>\n<li><p><strong>x</strong> : <em>float</em></p>\n\n<p>$x$. </p></li>\n</ul>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<ul>\n<li><p><strong>out</strong> : <em>float</em></p>\n\n<p>$\\Psi(x) \\sim \\sin x$.</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pqcprep.psi_tools.get_phase_target", "modulename": "pqcprep.psi_tools", "qualname": "get_phase_target", "kind": "function", "doc": "<p>Generate an array of phase function values taking into account rounding due to the limited \nsize of the target register. </p>\n\n<p>The number of values in the array is determined for the same frequency scaling as in <code>x_trans()</code>. </p>\n\n<h2 id=\"arguments\">Arguments:</h2>\n\n<ul>\n<li><p><strong>m</strong> : <em>int</em> </p>\n\n<p>Number of qubits in the target register. </p></li>\n<li><p><strong>func</strong> : <em>callable</em> </p>\n\n<p>Phase function.     </p></li>\n</ul>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<ul>\n<li><p><strong>phase_rounded</strong> : <em>array_like</em></p>\n\n<p>Array containing phase function values rounded to the precision \nafforded by the target register size.</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">m</span>, </span><span class=\"param\"><span class=\"n\">func</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pqcprep.psi_tools.A", "modulename": "pqcprep.psi_tools", "qualname": "A", "kind": "function", "doc": "<p>A wrapper for different amplitude functions. </p>\n\n<h2 id=\"arguments\">Arguments:</h2>\n\n<ul>\n<li><p><strong>x</strong> : <em>float</em> </p>\n\n<p>$x$.  </p></li>\n<li><p><strong>mode</strong> : <em>str</em></p>\n\n<p>Options are <code>'x76'</code> (corresponding to $A(x) \\sim x^{-7/6}$), <code>'uniform'</code> (corresponding to $A(x) \\sim 1$), and <code>'linear'</code> (corresponding to $A(x) \\sim x$).\nDefault is <code>'x76'</code>. </p></li>\n</ul>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<ul>\n<li><p><strong>out</strong> : <em>float</em> </p>\n\n<p>$A(x)$ for the $A$ selected via <code>mode</code>.</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;x76&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pqcprep.training_tools", "modulename": "pqcprep.training_tools", "kind": "module", "doc": "<p>Collection of useful functions for network training purposes.</p>\n"}, {"fullname": "pqcprep.training_tools.set_loss_func", "modulename": "pqcprep.training_tools", "qualname": "set_loss_func", "kind": "function", "doc": "<p>Set the loss function to be used in training a network. </p>\n\n<h2 id=\"arguments\">Arguments:</h2>\n\n<ul>\n<li><p><strong>loss_str</strong> : <em>str</em></p>\n\n<p>String specifying the loss function to use. Options are </p>\n\n<ul>\n<li><p><code>'MSE'</code> : mean squared error loss. Using <a href=\"https://pytorch.org/docs/stable/generated/torch.nn.MSELoss.html\">pytorch's implementation</a> with default settings. \n<code>criterion</code> takes two pytorch <code>Tensors</code> as inputs, corresponding to the network output and the desired output. </p></li>\n<li><p><code>'L1'</code> : mean absolute error loss. Using <a href=\"https://pytorch.org/docs/stable/generated/torch.nn.L1Loss.html\">pytorch's implementation</a> with default settings. \n<code>criterion</code> takes two pytorch <code>Tensors</code> as inputs, corresponding to the network output and the desired output.    </p></li>\n<li><p><code>'KLD'</code> : Kullback-Leibler divergence loss. Using <a href=\"https://pytorch.org/docs/stable/generated/torch.nn.KLDivLoss.html\">pytorch's implementation</a> with default settings. \n<code>criterion</code> takes two pytorch <code>Tensors</code> as inputs, corresponding to the network output and the desired output.   </p></li>\n<li><p><code>'CE'</code> : cross entropy loss. Using <a href=\"https://pytorch.org/docs/stable/generated/torch.nn.CrossEntropyLoss.html\">pytorch's implementation</a> with default settings. \n<code>criterion</code> takes two pytorch <code>Tensors</code> as inputs, corresponding to the network output and the desired output.  </p></li>\n<li><p><code>'SAM'</code> : sign-adjusted mismatch. Defined as $$\\text{SAM}(\\ket{x}, \\ket{y}) =  1 - \\sum_k |x_k| |y_k|,$$ where $\\ket{x}$, $\\ket{y}$ are the \nnetwork output and desired output, respectively, and $x_k$, $y_k$ are the coefficients w.r.t the two-register computational basis states.  <code>criterion</code> takes \ntwo pytorch <code>Tensors</code> as inputs, corresponding to the network output and the desired output.       </p></li>\n<li><p><code>'WIM'</code> : weighted mismatch. Defined analogously to SAM but with additional weights: $$\\text{WIM}(\\ket{x}, \\ket{y}) =1 - \\sum_k w_k |x_k||y_k|.$$\n<code>criterion</code> takes three pytorch <code>Tensors</code> as inputs, corresponding to the network output, the desired output and the weights. See <code>set_WIM_weights()</code>\nfor information on how the weights are calculated. This loss function is not an option if <code>ampl</code> is True. </p></li>\n<li><p><code>'WILL'</code> : weighted Lp loss. Defined as $$\\text{WILL}(\\ket{x}, \\ket{y}; p,q) = \\sum_k |x_k -y_k|^p + |x_k| |[k]_m - \\Psi([k]_n)|^q,$$ where $p$ and $q$ are coefficients stored in \n<code>arg_dict['WILL_p']</code>, <code>arg_dict['WILL_q']</code>, $[k]_n$ is the target register bit-string associated with the basis state $\\ket{k}$, $[k]_n$ is the input register bit-string \nassociated with the basis state $\\ket{k}$, $\\Psi$ is the function to be evaluated for the network, and $x_k$, $y_k$ have the same meaning as above.  <code>criterion</code> takes \n two pytorch <code>Tensors</code> as inputs, corresponding to the network output and the desired output. This loss function is not an option if <code>ampl</code> is True.               </p></li>\n</ul></li>\n<li><p><strong>arg_dict</strong> : <em>dict</em> </p>\n\n<p>A dictionary containing information on training variables, created with <code>pqcprep.file_tools.compress_args()</code> (or created \nwith <code>pqcprep.file_tools.compress_args_ampl()</code> in the case of <code>ampl</code> being True). </p></li>\n<li><p><strong>ampl</strong> : <em>boolean</em> </p>\n\n<p>If True, the loss function is defined for an amplitude-encoding network, as opposed to a function evaluation network. Default is \nFalse.     </p></li>\n</ul>\n\n<h2 id=\"returns\">Returns: </h2>\n\n<ul>\n<li><p><strong>criterion</strong> : <em>callable</em> </p>\n\n<p>The loss function as a callable object. Number and type of arguments depend on the chosen <code>loss_str</code> option (see above).</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">loss_str</span>, </span><span class=\"param\"><span class=\"n\">arg_dict</span>, </span><span class=\"param\"><span class=\"n\">ampl</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pqcprep.training_tools.set_WIM_weights", "modulename": "pqcprep.training_tools", "qualname": "set_WIM_weights", "kind": "function", "doc": "<p>Determine the weight coefficients for the WIM loss function. </p>\n\n<h2 id=\"arguments\">Arguments:</h2>\n\n<ul>\n<li><p><strong>generated_weights</strong> : <em>array_like</em></p>\n\n<p>The network weights generated in a given epoch. </p></li>\n<li><p><strong>arg_dict</strong> : <em>dict</em> </p>\n\n<p>A dictionary containing information on training variables, created with <code>pqcprep.file_tools.compress_args()</code>. </p></li>\n</ul>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<ul>\n<li><p><strong>WIM_weights_arr</strong> : <em>array_like</em></p>\n\n<p>The calculated coefficients for the WIM loss function.</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">generated_weights</span>, </span><span class=\"param\"><span class=\"n\">arg_dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pqcprep.training_tools.train_QNN", "modulename": "pqcprep.training_tools", "qualname": "train_QNN", "kind": "function", "doc": "<p>Train a QCNN to perform function evaluation $\\ket{j}\\ket{0} \\mapsto \\ket{j}\\ket{\\Psi(j)}$.</p>\n\n<p>The QCNN is generated using <code>pqcprep.pqc_tools.generate_network()</code>. </p>\n\n<h2 id=\"arguments\">Arguments:</h2>\n\n<ul>\n<li><p><strong>n</strong> : <em>int</em></p>\n\n<p>Number of qubits in the input register. </p></li>\n<li><p><strong>m</strong> : <em>int</em></p>\n\n<p>Number of qubits in the target register. </p></li>\n<li><p><strong>L</strong> : <em>int</em></p>\n\n<p>Number of layers in the network. </p></li>\n<li><p><strong>seed</strong> : <em>int</em> </p>\n\n<p>Seed for random number generation. </p></li>\n<li><p><strong>epochs</strong> : <em>int</em> </p>\n\n<p>Number of training runs. </p></li>\n<li><p><strong>func_str</strong> : <em>str</em></p>\n\n<p>String specifying the function $\\Psi$ to be evaluated. Must be a valid option for the argument <code>mode</code> of <code>pqcprep.psi_tools.psi()</code>. </p></li>\n<li><p><strong>loss_str</strong> : <em>str</em> </p>\n\n<p>String specifying the loss function minimised by the optimiser. Must be a valid option for the argument <code>loss_str</code> of <code>set_loss_func()</code>. </p></li>\n<li><p><strong>meta</strong> : <em>str</em></p>\n\n<p>String containing meta information to be included in output file names. </p></li>\n<li><p><strong>recover_temp</strong> : <em>boolean</em> </p>\n\n<p>If True, continue training from TEMP files (should they exist). If False and TEMP files exist they will be overwritten. </p></li>\n<li><p><strong>nint</strong> : <em>int</em></p>\n\n<p>Number of integer qubits in input register. </p></li>\n<li><p><strong>mint</strong> : <em>int</em></p>\n\n<p>Number of integer qubits in target register.  </p></li>\n<li><p><strong>phase_reduce</strong> : <em>boolean</em> </p>\n\n<p>If True, reduce $\\Psi(j)$ to the interval $(0, 2 \\pi]$ i.e. perform the mapping $\\Psi   o \\Psi  ext{mod} 2 \\pi$. </p></li>\n<li><p><strong>train_superpos</strong> : <em>boolean</em></p>\n\n<p>If True, train on a superposition of input states. If False, train on randomly sampled individual input states. </p></li>\n<li><p><strong>real</strong> : <em>boolean</em></p>\n\n<p>If True, generate a network only involving CX and Ry rotations, resulting in real amplitudes. </p></li>\n<li><p><strong>repeat_params</strong> : <em>str</em>, <em>optional</em> </p>\n\n<p>Keep parameters fixed for different layer types, i.e. use the same parameter values for each instance of a layer type. \nOptions are <code>None</code> (do not keep parameters fixed), <code>'CL'</code> (keep parameters fixed for convolutional layers), \n<code>'IL'</code> (keep parameters fixed for input layers), <code>'both'</code> (keep parameters fixed for both convolutional and input layers).    </p></li>\n<li><p><strong>WILL_p</strong> : <em>float</em> </p>\n\n<p>The $p$ parameter of the WILL loss function, as described in <code>set_loss_func()</code>.</p></li>\n<li><p><strong>WILL_q</strong> : <em>float</em> </p>\n\n<p>The $q$ parameter of the WILL loss function, as described in <code>set_loss_func()</code>.    </p></li>\n<li><p><strong>delta</strong> : <em>float</em> </p>\n\n<p>Hyper-parameter controlling the sampling of input state coefficients when training in superposition (<code>train_superpos = True</code>). Must be \nbetween 0 and 1. <code>delta = 0</code> corresponds to coefficients fixed at $\\frac{1}{\\sqrt{2^n}}$ while <code>delta = 1</code> corresponds to coefficients randomly assuming values on the range $(0,1)$. \nIntermediate values of <code>delta</code> result in coefficinets being randomly sampled on an interval around $\\frac{1}{\\sqrt{2^n}}$, with the range of the interval \ndetermined by the value of <code>delta</code>.     </p></li>\n</ul>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>The output produced by the training is saved in binary <code>.npy</code> files in the directory <code>DIR/ampl_outputs</code> using naming convention <code>&lt;TYPE&gt;_&lt;NAME_STR&gt;.npy</code>\nwhere <code>&lt;NAME_STR&gt;</code> is the name string produced by <code>pqcprep.file_tools.vars_to_name_str()</code> and <code>&lt;TYPE&gt;</code> is one of: </p>\n\n<ul>\n<li><p><code>weights</code> : file containing the QCNN weights determined by the optimiser;</p></li>\n<li><p><code>loss</code> : file containing the loss value after each epoch; </p></li>\n<li><p><code>mismatch</code> : file containg the mismatch value after each epoch; </p></li>\n<li><p><code>grad</code> : file containing the  squared weight gradient norm after each epoch;  </p></li>\n<li><p><code>vargrad</code> : file containing the variance of the weight gradients after each epoch.   </p></li>\n</ul>\n\n<p>TAKE DECISION ON DIR HANDLING LATER !!!</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">n</span>,</span><span class=\"param\">\t<span class=\"n\">m</span>,</span><span class=\"param\">\t<span class=\"n\">L</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span>,</span><span class=\"param\">\t<span class=\"n\">epochs</span>,</span><span class=\"param\">\t<span class=\"n\">func_str</span>,</span><span class=\"param\">\t<span class=\"n\">loss_str</span>,</span><span class=\"param\">\t<span class=\"n\">meta</span>,</span><span class=\"param\">\t<span class=\"n\">recover_temp</span>,</span><span class=\"param\">\t<span class=\"n\">nint</span>,</span><span class=\"param\">\t<span class=\"n\">mint</span>,</span><span class=\"param\">\t<span class=\"n\">phase_reduce</span>,</span><span class=\"param\">\t<span class=\"n\">train_superpos</span>,</span><span class=\"param\">\t<span class=\"n\">real</span>,</span><span class=\"param\">\t<span class=\"n\">repeat_params</span>,</span><span class=\"param\">\t<span class=\"n\">WILL_p</span>,</span><span class=\"param\">\t<span class=\"n\">WILL_q</span>,</span><span class=\"param\">\t<span class=\"n\">delta</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pqcprep.training_tools.test_QNN", "modulename": "pqcprep.training_tools", "qualname": "test_QNN", "kind": "function", "doc": "<p>Test performance of a QCNN trained for function evaluation with respect to different metrics. </p>\n\n<p>This requires the existence of an appropriate <code>weights_&lt;NAME_STR&gt;.npy</code> file (as produced by <code>train_QNN()</code>) in the directory <code>DIR/outputs</code>. </p>\n\n<p>....</p>\n\n<h2 id=\"arguments\">Arguments: </h2>\n\n<p>Same arguments as <code>train_QNN()</code>. See there for a description. </p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>.... </p>\n\n<p>The output produced by the training is saved in binary <code>.npy</code> files in the directory <code>DIR/ampl_outputs</code> using naming convention <code>&lt;TYPE&gt;_&lt;NAME_STR&gt;.npy</code>\nwhere <code>&lt;NAME_STR&gt;</code> is the name string produced by <code>pqcprep.file_tools.vars_to_name_str()</code> and <code>&lt;TYPE&gt;</code> is one of: </p>\n\n<p>TAKE DECISION ON DIR HANDLING LATER !!!</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">n</span>,</span><span class=\"param\">\t<span class=\"n\">m</span>,</span><span class=\"param\">\t<span class=\"n\">L</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span>,</span><span class=\"param\">\t<span class=\"n\">epochs</span>,</span><span class=\"param\">\t<span class=\"n\">func_str</span>,</span><span class=\"param\">\t<span class=\"n\">loss_str</span>,</span><span class=\"param\">\t<span class=\"n\">meta</span>,</span><span class=\"param\">\t<span class=\"n\">nint</span>,</span><span class=\"param\">\t<span class=\"n\">mint</span>,</span><span class=\"param\">\t<span class=\"n\">phase_reduce</span>,</span><span class=\"param\">\t<span class=\"n\">train_superpos</span>,</span><span class=\"param\">\t<span class=\"n\">real</span>,</span><span class=\"param\">\t<span class=\"n\">repeat_params</span>,</span><span class=\"param\">\t<span class=\"n\">WILL_p</span>,</span><span class=\"param\">\t<span class=\"n\">WILL_q</span>,</span><span class=\"param\">\t<span class=\"n\">delta</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pqcprep.training_tools.ampl_train_QNN", "modulename": "pqcprep.training_tools", "qualname": "ampl_train_QNN", "kind": "function", "doc": "<p>Train a QCNN to prepare an amplitude distribution: $\\ket{0} \\mapsto \\sum_j A(j) \\ket{j}$.</p>\n\n<p>The QCNN is generated using <code>pqcprep.pqc_tools.A_generate_network()</code>. </p>\n\n<h2 id=\"arguments\">Arguments:</h2>\n\n<ul>\n<li><p><strong>n</strong> : <em>int</em> </p>\n\n<p>Number of qubits in the register. </p></li>\n<li><p><strong>L</strong> : <em>int</em> </p>\n\n<p>Number of layers in the network. </p></li>\n<li><p><strong>x_min</strong> : <em>float</em> </p>\n\n<p>Minimum of function domain.         </p></li>\n<li><p><strong>x_max</strong> : <em>float</em> </p>\n\n<p>Maximum of function domain.   </p></li>\n<li><p><strong>seed</strong> : <em>int</em> </p>\n\n<p>Seed for random number generation. </p></li>\n<li><p><strong>epochs</strong> : <em>int</em> </p>\n\n<p>Number of training runs. </p></li>\n<li><p><strong>func_str</strong> : <em>str</em></p>\n\n<p>String specifying the function $A$ to be prepared. Must be a valid option for the argument <code>mode</code> of <code>pqcprep.psi_tools.A()</code>. </p></li>\n<li><p><strong>loss_str</strong> : <em>str</em> </p>\n\n<p>String specifying the loss function minimised by the optimiser. Must be a valid option for the argument <code>loss_str</code> of <code>set_loss_func()</code>. </p></li>\n<li><p><strong>meta</strong> : <em>str</em></p>\n\n<p>String containing meta information to be included in output file names. </p></li>\n<li><p><strong>recover_temp</strong> : <em>boolean</em> </p>\n\n<p>If True, continue training from TEMP files (should they exist). If False and TEMP files exist they will be overwritten. </p></li>\n<li><p><strong>nint</strong> : <em>int</em></p>\n\n<p>Number of integer qubits in the register.  </p></li>\n<li><p><strong>repeat_params</strong> : <em>boolean</em> </p>\n\n<p>If True, keep parameters fixed for different layer types, i.e. use the same parameter values for each instance of a layer type.</p></li>\n</ul>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>The output produced by the training is saved in binary <code>.npy</code> files in the directory <code>DIR/ampl_outputs</code> using naming convention <code>&lt;TYPE&gt;_&lt;NAME_STR&gt;.npy</code>\nwhere <code>&lt;NAME_STR&gt;</code> is the name string produced by <code>pqcprep.file_tools.vars_to_name_str_ampl()</code> and <code>&lt;TYPE&gt;</code> is one of: </p>\n\n<ul>\n<li><p><code>weights</code> : file containing the QCNN weights determined by the optimiser;</p></li>\n<li><p><code>state_vec</code> : file containing the statevector corresponding to the register after applying the QCNN; </p></li>\n<li><p><code>loss</code> : file containing the loss value after each training run; </p></li>\n<li><p><code>mismatch</code> : file containg the mismatch value after each training run.   </p></li>\n</ul>\n\n<p>TAKE DECISION ON DIR HANDLING LATER !!!</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">n</span>,</span><span class=\"param\">\t<span class=\"n\">L</span>,</span><span class=\"param\">\t<span class=\"n\">x_min</span>,</span><span class=\"param\">\t<span class=\"n\">x_max</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span>,</span><span class=\"param\">\t<span class=\"n\">epochs</span>,</span><span class=\"param\">\t<span class=\"n\">func_str</span>,</span><span class=\"param\">\t<span class=\"n\">loss_str</span>,</span><span class=\"param\">\t<span class=\"n\">meta</span>,</span><span class=\"param\">\t<span class=\"n\">recover_temp</span>,</span><span class=\"param\">\t<span class=\"n\">nint</span>,</span><span class=\"param\">\t<span class=\"n\">repeat_params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();